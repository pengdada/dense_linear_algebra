# Determine the compiler to use for ICPC programs
# NOTE, a generator may set CMAKE_ICPC_COMPILER before
# loading this file to force a compiler.
# use environment variable ICPC first if defined by user, next use 
# the cmake variable CMAKE_GENERATOR_ICPC which can be defined by a generator
# as a default compiler

IF(NOT CMAKE_ICPC_COMPILER)

  # prefer the environment variable ICPC
  IF($ENV{ICPC} MATCHES ".+")
    GET_FILENAME_COMPONENT(CMAKE_ICPC_COMPILER_INIT $ENV{ICPC} PROGRAM PROGRAM_ARGS CMAKE_ICPC_FLAGS_ENV_INIT)
    IF(CMAKE_ICPC_FLAGS_ENV_INIT)
      SET(CMAKE_ICPC_COMPILER_ARG1 "${CMAKE_ICPC_FLAGS_ENV_INIT}" CACHE STRING "First argument to ICPC compiler")
    ENDIF(CMAKE_ICPC_FLAGS_ENV_INIT)
    IF(EXISTS ${CMAKE_ICPC_COMPILER_INIT})
    ELSE(EXISTS ${CMAKE_ICPC_COMPILER_INIT})
      MESSAGE(FATAL_ERROR "Could not find compiler set in environment variable ICPC:\n$ENV{ICPC}.") 
    ENDIF(EXISTS ${CMAKE_ICPC_COMPILER_INIT})
  ENDIF($ENV{ICPC} MATCHES ".+")

  # next try prefer the compiler specified by the generator
  IF(CMAKE_GENERATOR_ICPC) 
    IF(NOT CMAKE_ICPC_COMPILER_INIT)
      SET(CMAKE_ICPC_COMPILER_INIT ${CMAKE_GENERATOR_ICPC})
    ENDIF(NOT CMAKE_ICPC_COMPILER_INIT)
  ENDIF(CMAKE_GENERATOR_ICPC)

  # finally list compilers to try
  IF(CMAKE_ICPC_COMPILER_INIT)
    SET(CMAKE_ICPC_COMPILER_LIST ${CMAKE_ICPC_COMPILER_INIT})
  ELSE(CMAKE_ICPC_COMPILER_INIT)
    SET(CMAKE_ICPC_COMPILER_LIST icpc )  
  ENDIF(CMAKE_ICPC_COMPILER_INIT)

  # Find the compiler.
  FIND_PROGRAM(CMAKE_ICPC_COMPILER NAMES ${CMAKE_ICPC_COMPILER_LIST} DOC "ICPC compiler")
  IF(CMAKE_ICPC_COMPILER_INIT AND NOT CMAKE_ICPC_COMPILER)
    SET(CMAKE_ICPC_COMPILER "${CMAKE_ICPC_COMPILER_INIT}" CACHE FILEPATH "ICPC compiler" FORCE)
  ENDIF(CMAKE_ICPC_COMPILER_INIT AND NOT CMAKE_ICPC_COMPILER)
ENDIF(NOT CMAKE_ICPC_COMPILER)
MARK_AS_ADVANCED(CMAKE_ICPC_COMPILER)

GET_FILENAME_COMPONENT(COMPILER_LOCATION "${CMAKE_ICPC_COMPILER}"  PATH)

# FIND_PROGRAM(GNAT_EXECUTABLE_BUILDER NAMES icpc PATHS ${COMPILER_LOCATION} )
FIND_PROGRAM(CMAKE_AR NAMES xiar PATHS ${COMPILER_LOCATION} )

FIND_PROGRAM(CMAKE_RANLIB NAMES ranlib)
IF(NOT CMAKE_RANLIB)
   SET(CMAKE_RANLIB : CACHE INTERNAL "noop for ranlib")
ENDIF(NOT CMAKE_RANLIB)
MARK_AS_ADVANCED(CMAKE_RANLIB)

# configure variables set in this file for fast reload later on
#CONFIGURE_FILE(${CMAKE_ROOT}/Modules/CMakeICPCCompiler.cmake.in 
#message(STATUS "DEBUG: CMAKE_BINARY_DIR = ${CMAKE_BINARY_DIR}")
#message(STATUS "DEBUG: CMAKE_FILES_DIRECTORY = ${CMAKE_FILES_DIRECTORY}")
#message(STATUS "DEBUG: CMAKE_PLATFORM_INFO_DIR = ${CMAKE_PLATFORM_INFO_DIR}")
CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/cmake/Modules/Languages/CMakeICPCCompiler.cmake.in 
  "${CMAKE_PLATFORM_INFO_DIR}/CMakeICPCCompiler.cmake" IMMEDIATE)
MARK_AS_ADVANCED(CMAKE_AR)

SET(CMAKE_ICPC_COMPILER_ENV_VAR "ICPC")
